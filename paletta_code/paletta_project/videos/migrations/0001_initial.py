# Generated by Django 4.2.10 on 2025-08-07 21:45

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import paletta_core.storage
import videos.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('libraries', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_area', models.CharField(choices=[('private', 'Private'), ('custom', 'Custom'), ('engineering_sciences', 'Engineering Sciences'), ('mathematical_physical_sciences', 'Mathematical & Physical Sciences'), ('medical_sciences', 'Medical Sciences'), ('life_sciences', 'Life Sciences'), ('brain_sciences', 'Brain Sciences'), ('built_environment', 'Built Environment'), ('population_health', 'Population Health'), ('arts_humanities', 'Arts & Humanities'), ('social_historical_sciences', 'Social & Historical Sciences'), ('education', 'Education'), ('fine_art', 'Fine Art'), ('law', 'Law'), ('business', 'Business'), ('campus_life', 'Campus Life'), ('teaching_learning', 'Teaching & Learning'), ('research_innovation', 'Research & Innovation'), ('city_environment', 'City & Environment'), ('aerial_establishing', 'Aerial & Establishing Shots'), ('people_portraits', 'People & Portraits'), ('culture_events', 'Culture & Events'), ('workspaces_facilities', 'Workspaces & Facilities'), ('cutaways_abstracts', 'Cutaways & Abstracts'), ('historical_archive', 'Historical & Archive')], max_length=50)),
                ('custom_name', models.CharField(blank=True, help_text="Custom content type name (used when subject_area is 'custom')", max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, null=True, storage=paletta_core.storage.get_media_storage, upload_to=videos.models.content_type_image_path)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this content type is available for selection')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_types', to='libraries.library')),
            ],
            options={
                'verbose_name_plural': 'Content Types',
                'ordering': ['subject_area', 'custom_name'],
                'unique_together': {('custom_name', 'library'), ('subject_area', 'library')},
            },
        ),
        migrations.CreateModel(
            name='PalettaContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('people_community', 'People and Community'), ('buildings_architecture', 'Buildings & Architecture'), ('classrooms_learning', 'Classrooms & Learning Spaces'), ('field_trips_outdoor', 'Field Trips & Outdoor Learning'), ('events_conferences', 'Events & Conferences'), ('research_innovation_spaces', 'Research & Innovation Spaces'), ('technology_equipment', 'Technology & Equipment'), ('everyday_campus', 'Everyday Campus Life'), ('urban_natural_environments', 'Urban & Natural Environments'), ('backgrounds_abstracts', 'Backgrounds & Abstracts'), ('private', 'Private')], max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Paletta Content Type',
                'verbose_name_plural': 'Paletta Content Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='libraries.library')),
            ],
            options={
                'unique_together': {('name', 'library')},
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('upload_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('video_file', models.FileField(blank=True, help_text='Temporary storage before uploading to AWS S3 storage', null=True, upload_to=videos.models.video_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'avi', 'mov', 'wmv', 'flv', 'mkv'])])),
                ('storage_url', models.URLField(blank=True, max_length=1024, null=True)),
                ('download_link', models.URLField(blank=True, help_text='Temporary download link for the video', max_length=500, null=True)),
                ('download_link_expiry', models.DateTimeField(blank=True, help_text='Expiration time for the download link', null=True)),
                ('storage_status', models.CharField(choices=[('pending', 'Pending Upload'), ('uploading', 'Uploading to Storage'), ('stored', 'Stored in Deep Storage'), ('failed', 'Upload Failed'), ('processing', 'Processing'), ('processing_failed', 'Processing Failed')], default='pending', help_text='Current status of the video in AWS S3 storage', max_length=20)),
                ('storage_reference_id', models.CharField(blank=True, help_text='Reference ID in the AWS S3 storage system', max_length=1024, null=True)),
                ('thumbnail', models.ImageField(blank=True, null=True, storage=paletta_core.storage.get_media_storage, upload_to=videos.models.thumbnail_upload_path)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in seconds', null=True)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='Size in bytes', null=True)),
                ('resolution', models.CharField(blank=True, help_text='Video resolution, e.g., 1920x1080', max_length=20, null=True)),
                ('frame_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Frame rate, e.g., 29.97', max_digits=5, null=True)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('format', models.CharField(blank=True, max_length=10, null=True)),
                ('content_type', models.ForeignKey(help_text='Required: Select one content type', on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='videos.contenttype')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_videos', to='libraries.library')),
            ],
        ),
        migrations.CreateModel(
            name='VideoTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.tag')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.video')),
            ],
            options={
                'unique_together': {('video', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='VideoLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('log_type', models.CharField(choices=[('upload', 'Video Uploaded'), ('process', 'Video Processing'), ('store', 'Video Stored in S3'), ('download', 'Video Download Requested'), ('delete', 'Video Deleted'), ('error', 'Error Occurred'), ('status_change', 'Status Changed')], max_length=20)),
                ('message', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='Size in bytes', null=True)),
                ('storage_status', models.CharField(blank=True, max_length=20, null=True)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in seconds', null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='video_logs', to=settings.AUTH_USER_MODEL)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='videos.video')),
            ],
            options={
                'verbose_name': 'Video Log',
                'verbose_name_plural': 'Video Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='video',
            name='tags',
            field=models.ManyToManyField(related_name='videos', through='videos.VideoTag', to='videos.tag'),
        ),
        migrations.AddField(
            model_name='video',
            name='uploader',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to=settings.AUTH_USER_MODEL),
        ),
    ]
